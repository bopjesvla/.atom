{
  "_args": [
    [
      {
        "raw": "/tmp/d-11718-32666-128tkqg/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/tmp/d-11718-32666-128tkqg/package.tgz",
        "spec": "/tmp/d-11718-32666-128tkqg/package.tgz",
        "type": "local"
      },
      "/tmp/apm-install-dir-11718-32666-1rl47bl"
    ]
  ],
  "_from": "../d-11718-32666-128tkqg/package.tgz",
  "_id": "narrow@0.22.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/narrow",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/tmp/d-11718-32666-128tkqg/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/tmp/d-11718-32666-128tkqg/package.tgz",
    "spec": "/tmp/d-11718-32666-128tkqg/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-11718-32666-128tkqg/package.tgz",
  "_shasum": "6b5544d527dc4026090dd9cf0d17eb50fef099b9",
  "_shrinkwrap": null,
  "_spec": "/tmp/d-11718-32666-128tkqg/package.tgz",
  "_where": "/tmp/apm-install-dir-11718-32666-1rl47bl",
  "bugs": {
    "url": "https://github.com/t9md/atom-narrow/issues"
  },
  "consumedServices": {
    "vim-mode-plus": {
      "versions": {
        "^0.1.0": "consumeVim"
      }
    }
  },
  "dependencies": {
    "underscore-plus": "^1.6.6"
  },
  "description": "narrow something",
  "devDependencies": {},
  "engines": {
    "atom": ">=0.174.0 <2.0.0"
  },
  "homepage": "https://github.com/t9md/atom-narrow#readme",
  "keywords": [
    "unite.vim",
    "emacs-helm"
  ],
  "license": "MIT",
  "main": "./lib/main",
  "name": "narrow",
  "optionalDependencies": {},
  "readme": "# narrow\n\nnarrow something.  \nCode navigation tool inspired by unite.vim, emacs-helm.  \n\n# Development status\n\nalpha\n\n![narrow](https://raw.githubusercontent.com/t9md/t9md/4df5df86884a25bf8b62dc3b605df050a06c8232/img/atom-narrow/narrow.gif)\n\n# What's this\n\n- Provide narrowing UI like unite/denite.vim or emacs-helm.\n- But **not** aiming to become \"can open anything from narrow-able UI\" package.\n- Primal focus is on **code-navigation**.\n- Most of bundled providers are **bound to specific editor**.\n- And sync current-item on narrow-UI as you move cursor on bound editor.\n- This **auto sync current-item to cursor of bound editor** gives you valuable context to keep focus on X.  \n\n# Roles in play.\n\n- `narrow-editor` or `narrow-ui`: handles user input and update narrowed item list.\n- `narrow-provider`: Provide items to narrow and action to jump to item selected.\n\n![overview](https://raw.githubusercontent.com/t9md/t9md/45e8b52a2fbe8a9d47a2f2d30e8f755f5d5cba25/img/atom-narrow/narrow-overview.png)\n\n# Features\n\n- Auto preview items under cursor(default `true` for all providers).\n- Auto update items on narrow-editor when item changed(e.g. `narrow:lines` refresh items when text changed).\n- Auto refresh items on active text-editor change(e.g. `narrow:symbols` always shows current-editor's symbol list).\n- Auto sync editor's cursor position to selected item on narrow-editor(narrowing UI).\n- Navigate between narrowed items without focusing narrow-editor.\n- Direct edit in narrow-editor which update realFile on disk by `narrow:update-real-file` commands.\n- [vim-mode-plus](https://atom.io/packages/vim-mode-plus) integration( I'm also maintainer of vim-mode-plus ).\n- For what can I use this?, See [Use case and flow of keystrokes](https://github.com/t9md/atom-narrow/issues/75).\n- Also see [Q&A](#qa) section at bottom of this README.\n\n# Bundled providers\n\n- `search`: Search by `ag`( you need to install `ag` by yourself).\n- `atom-scan`: Similar to `search` but use Atom's `atom.workspace.scan`.\n- `lines`: Narrow current editors lines.\n- `scan`: Scan current editor by `TextEditor.prototype.scan`. created for better replacement of `narrow:lines`.\n- `fold`: Provide fold-starting rows as item.\n- `git-diff`: Info source is from core `git-diff` package.\n- `bookmarks`: For core `bookmarks` package\n- `symbols`: Symbols are provided by core `symbols-views` package's.\n- `linter`: Use message provided by [linter](https://atom.io/packages/linter) package.\n\n# Quick tour\n\nTo follow this quick-tour, you don't need custom keymap.\n\n### Step1. basic by using `narrow:lines`\n\nItems are each lines on editor.\n\n1. Open some text-editor, then via command-palette, invoke `Narrow Line`.\n2. narrow-editor opened, as you type, you can narrow items.\n3. When you type `apple lemon` as query. lines which matched both `apple` and `lemon` are listed.\n4. You can move normal `up`, `down`(or `j`, `k` in read-only mode) key to quick-preview items.\n5. `enter` to confirm. When confirmed, narrow-editor closed.\n\nThe read-only mode is enabled by default.\n\n### Step2. navigate from outside of `narrow-editor`.\n\n1. Open some text-editor, then via command-palette, invoke `Narrow Line`.\n2. narrow-editor opened, as you type, you can narrow items.\n3. Click invoking editor. And see your clicked position is auto reflected narrow-editor.\n4. `ctrl-cmd-n` to move to `next-item`, `ctrl-cmd-p` to move to `previous-item`.\n5. If you want to close narrow-editor you can close by `ctrl-g`(no need to focus narrow-editor).\n6. If you want to change narrow-query, you have to focus to narrow-editor\n  - Use `ctrl-cmd-f`(`narrow:focus`) to focus narrow-editor's item indicator row.\n  - Use `ctrl-cmd-i`(`narrow:focus-prompt`) to focus narrow-editor's query prompt row\n  - Both commands are available from outside/inside of narrow-editor.\n7. These navigation keymaps are available for all provider(e.g. `search`, `fold` etc).\n\n### Step3. [DANGER] direct-edit\n\nDirect-edit is \"edit on narrow-editor then save to real-file\" feature.  \nAvailable for these three providers `lines`, `search` and `atom-scan`.  \n\n⚠️ This feature is really new and still experimental state.  \n⚠️ Don't try code-base which is not managed by SCM.  \n⚠️ I can say sorry, but I can not recover file for you.  \n\n1. Open file from project, place cursor for variable name `hello`\n2. Then invoke `Narrow Search By Current Word`.\n3. All `hello` matching items are shows up on narrow-editor.\n4. If you want, you can further narrow by query.\n5. Then edit narrow-editor's text **directly**.\n  - Place cursor on `hello`. Then `ctrl-cmd-g`(`find-and-replace:select-all`), then type `world`.\n6. Invoke `Narrow Ui: Update Real File` from command-palette.\n7. DONE, changes you made on narrow-editor items are applied to real-file(and saved).\n8. You can undo changes by re-edit items on narrow-editor and reapply changes by `Narrow Ui: Update Real File`.\n\n\n# Commands\n\n### Available in all text-editor\n\n##### Ohters\n\n- `narrow:focus`: ( `ctrl-cmd-f` ) Focus to `narrow-editor`, if executed in `narrow-editor`, it re-focus to original editor.\n- `narrow:focus-prompt`: ( `ctrl-cmd-i` ) Focus to `narrow-editor`'s query input prompt, if executed in `narrow-editor`, it re-focus to original editor.\n- `narrow:refresh`: Manually refresh items in `narrow-editor`.\n- `narrow:close`: ( `ctrl-g` ) Close currently opened `narrow-editor` one at a time.\n- `narrow:next-item`: ( `ctrl-cmd-n` ) Move cursor to position of next-item.\n- `narrow:previous-item`: ( `ctrl-cmd-p` ) Move cursor to position of previous-item.\n\n##### Provider commands\n\nNo keymaps are provided\n\n- `narrow:lines`\n- `narrow:lines-by-current-word`\n- `narrow:scan`\n- `narrow:scan-by-current-word`\n- `narrow:fold`\n- `narrow:fold-by-current-word`\n- `narrow:search`: [ag](https://github.com/ggreer/the_silver_searcher) search. need install by your self.\n- `narrow:search-by-current-word`\n- `narrow:search-current-project`\n- `narrow:search-current-project-by-current-word`\n- `narrow:atom-scan`\n- `narrow:atom-scan-by-current-word`\n- `narrow:focus`\n- `narrow:symbols`\n- `narrow:linter`\n- `narrow:bookmarks`\n- `narrow:git-diff`\n\n### narrow-editor(narrow-ui)\n\n- `core:confirm`: ( `enter` ) Close `narrow-editor`\n- `narrow-ui:confirm-keep-open`: keep open `narrow-editor`\n- `narrow-ui:preview-item`: Preview currently selected item manually( you don't need in most case ).\n- `narrow-ui:preview-next-item`: ( `tab` ) Preview next-item without moving cursor from `narrow-editor`'s query prompt.\n- `narrow-ui:preview-previous-item`: ( `shift-tab` ) Preview next-item without moving cursor from `narrow-editor`'s query prompt.\n- `narrow-ui:toggle-auto-preview`: ( `ctrl-r` for non-vim-mode-plus user) Disable/enable auto-preview for this `narrow-editor`.\n<!-- - `narrow-ui:move-to-prompt-or-selected-item`: ( DEPRECATED ) -->\n- `narrow-ui:move-to-prompt`: `ctrl-cmd-i`\n- `narrow-ui:start-insert`: `I`, `a`\n- `narrow-ui:stop-insert`: `escape`\n- `narrow-ui:update-real-file`: Apply changes made in `narrow-editor` to real-file.( edit in `narrow-editor` then save it to real file. )\n\n# Keymaps\n\nNo keymap to invoke narrow provider(e.g `narrow:lines`).  \nStart it from command-palette or set keymap in `keymap.cson`.\n\n⚠️ [default keymap](https://github.com/t9md/atom-narrow/blob/master/keymaps/narrow.cson) is not yet settled, this will likely to change in future version.   \n\n### My keymap(vim-mode-plus user) and config\n\n\nI set `closeOnConfirm` to `false` for all provider.  \nSince I want to close manually by `ctrl-g`(Maybe change default in future).  \n\n###### config\n\n```\n  narrow:\n    AtomScan:\n      closeOnConfirm: false\n    Bookmarks:\n      closeOnConfirm: false\n    Fold:\n      closeOnConfirm: false\n    GitDiff:\n      closeOnConfirm: false\n    Lines:\n      closeOnConfirm: false\n    Linter:\n      closeOnConfirm: false\n    Scan:\n      closeOnConfirm: false\n    Search:\n      closeOnConfirm: false\n    Symbols:\n      closeOnConfirm: false\n    confirmOnUpdateRealFile: false\n```\n\n###### `keymap.cson`\n\n```coffeescript\n# From outside of narrow-editor\n# -------------------------\n'atom-text-editor.vim-mode-plus.normal-mode':\n  'space f': 'narrow:fold'\n  'space o': 'narrow:symbols'\n\n  'space l': 'narrow:scan'\n  'space L': 'narrow:scan-by-current-word'\n  # 'space l': 'narrow:lines'\n  # 'space L': 'narrow:lines-by-current-word'\n  'space c': 'narrow:linter'\n  'space s': 'narrow:search'\n  'space S': 'narrow:search-by-current-word'\n  'space a': 'narrow:atom-scan'\n  'space A': 'narrow:atom-scan-by-current-word'\n  'space G': 'narrow:git-diff'\n  'space B': 'narrow:bookmarks'\n\n# Only on narrow-editor\n# -------------------------\n# - Use these TWO key very frequently\n#   - cmd-f: To focus to narrow-editor AND focus-back to original-editor\n#   - cmd-i: To focus to narrow-editor's prompt AND focus-back to original-editor\n\n# When workspace has narrow-editor\n'atom-workspace.has-narrow atom-text-editor.vim-mode-plus.normal-mode':\n  'cmd-f': 'narrow:focus' # focus to narrow-editor\n  'cmd-i': 'narrow:focus-prompt' # focus to prompt of narrow-editor\n  'ctrl-cmd-l': 'narrow:refresh' # manually refresh items\n  'down': 'narrow:next-item'\n  'up': 'narrow:previous-item'\n\n# narrow-editor regardless of mode of vim\n'atom-text-editor.narrow.narrow-editor[data-grammar=\"source narrow\"]':\n  'cmd-f': 'narrow:focus'\n  'cmd-i': 'narrow:focus-prompt' # cmd-i to return to calling editor.\n  # Danger: apply change on narrow-editor to real file by `cmd-s`.\n  'cmd-s': 'narrow-ui:update-real-file'\n\n'atom-text-editor.narrow.narrow-editor.vim-mode-plus.normal-mode[data-grammar=\"source narrow\"]':\n  # Danger: I use direct-edit very frequently, so intentionally recover `i` of vim-mode-plus.\n  'i': 'vim-mode-plus:activate-insert-mode'\n\n# NOTE: following keymap prevent me to type `;`, `[`, `]` in insert-mode.\n# Which is very problematic in direct-edit mode since I can not insert these chars.\n# Be aware this limitation if you copy this.\n# Solution comes in future by differentiating scope in prompt and item-area.\n'atom-text-editor.narrow.narrow-editor.vim-mode-plus.normal-mode[data-grammar=\"source narrow\"],\natom-text-editor.narrow.narrow-editor.vim-mode-plus.insert-mode[data-grammar=\"source narrow\"]':\n  ';': 'core:confirm' # Confirm by `;`\n  ']': 'narrow-ui:preview-next-item' # preview next while cursor is at prompt\n  '[': 'narrow-ui:preview-previous-item' # preview previous while cursor is at prompt\n```\n\n# Recommended configuration for other packages.\n\n- Suppress autocomplete-plus's popup on narrow-editor\n- Disable vim-mode-plus's highlight-search on narrow-editor\n\n```coffeescript\n\"*\":\n  \"autocomplete-plus\":\n    suppressActivationForEditorClasses: [\n      # snip\n      \"narrow\"\n    ]\n  # snip\n  \"vim-mode-plus\":\n    highlightSearchExcludeScopes: [\n      \"narrow\"\n    ]\n```\n\n# Notes for vim-mode-plus user\n\nLearn [keymap](https://github.com/t9md/atom-narrow/blob/make-it-stable/keymaps/narrow.cson) available as default.  \ne.g. You can move to next or previous item by `tab`, `shift-tab`(for this to work, you need vim-mode-plus v0.81.0 or later).  \n\n## Start narrow from vim-mode-plus's search-input-form\n\nIf you are [vim-mode-plus](https://atom.io/packages/vim-mode-plus) user.\nFollowing command are available from vim-mode-plus's search(`/` or `?`) mini-editor.\nSee [keymap definition](https://github.com/t9md/atom-narrow/blob/make-it-stable/keymaps/narrow.cson)\n\n- `vim-mode-plus-user:narrow:lines`\n- `vim-mode-plus-user:narrow:search`\n- `vim-mode-plus-user:narrow:atom-scan`\n- `vim-mode-plus-user:narrow:search-current-project`\n\n## How to edit item-area for direct-edit.\n\n- In narrow-editor, `i`, `a` in `normal-mode` move cursor to prompt line.\n- So when you want to edit items itself for `direct-edit` and `update-real-file` use other key to enter `insert-mode`.\n- `I` is intentionally mapped to `vim-mode-plus:activate-insert-mode` which is normally mapped to `i`.\n  - Which might not be intuitive, but I want make item mutatation bit difficult. So user have to type `I`.\n- Other than `I`, you can start `insert-mode` by `A`, `c` etc..\n\n# Q&A\n\n### How can I exclude particular file from `narrow:search`\n\n- Use `backspace` to exclude particular file from result.\n- `ctrl-backspace` clear excluded file list and refresh\n- These keymaps are available in `narrow-editor` and you are in `read-only-mode`\n\n### Want to skip to `next-file`, `previous-file`\n\n- Use `n`, `p` in `read-only` mode.\n\n### I want `narrow:symbols` always shows up at right-most pane and don't want to close.\n\n1. Open `narrow:symbols`( or maybe you want to use `narrow:fold` )\n2. Move this `narrow-editor` by drag and drop to the place where you want.\n3. From command-palette, execute `Narrow Ui: Protect`. Now `narrow-editor` protected.\n4. Protected `narrow-editor` is not closed by `ctrl-g`( `narrow:close` ), and not closed by confirm by `enter`.\n5. To close, use normal `cmd-w` or close button on tab.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/t9md/atom-narrow.git"
  },
  "version": "0.22.0"
}
